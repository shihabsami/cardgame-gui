package model.interfaces;

/**
 * <pre>
 * Interface for representing the player.
 * To be implemented by SimplePlayer class with the following constructor.
 * 	  public SimplePlayer(String id, String playerName, int initialPoints)
 * <b>Note:</b> Player id is unique and if another player with same id is added it replaces the previous player.
 * </pre>
 */
public interface Player extends Comparable<Player>
{
   /**
    * Getter for the player's name attribute.
    * @return human readable player name
    */
   String getPlayerName();

   /**
    * Setter for the player's name attribute.
    * @param playerName human readable player name
    */
   void setPlayerName(String playerName);

   /**
    * Getter for the player's initial points attribute.
    * @return number of points from setPoints()
    */
   int getPoints();

   /**
    * <pre>
    * Setter for the player's name attribute.
    * <b>Note:</b> Updated by {@link GameEngine#applyWinLoss(Player, int)} with each win or loss.
    * </pre>
    * @param points for betting
    */
   void setPoints(int points);

   /**
    * Getter for the player's id attribute.
    * @return the player id which is generated by the implementing class
    */
   String getPlayerId();

   /**
    * Setter for the player's bet attribute.
    * <b>Note:</b> must use {@link #resetBet()} for 0 bet since not valid for this method.
    * @param bet the bet amount in integer
    * @return true if bet is greater than 0 and player has sufficient points to place the bet
    */
   boolean setBet(int bet);

   /**
    * Getter for the player's bet attribute.
    * @return the bet as set with setBet()
    */
   int getBet();

   /**
    * Method to reset the bet to 0 for next round (in case player does not bet again in next round).
    */
   void resetBet();

   /**
    * Getter for the player's result attribute.
    * @return the result of the most recent hand as set by {@link #setResult(int)}
    */
   int getResult();

   /**
    * Setter for the player's result attribute.
    * @param result the result of the most recent hand (updated from the GameEngine via {@link GameEngine#dealPlayer(Player, int)})
    */
   void setResult(int result);

   /**
    * Method to evaluate whether two players are equal.
    * @param player another player to compare with
    * @return true if the player id is equal
    */
   boolean equals(Player player);

   /**
    * <pre>
    * Overridden {@link Object#equals(Object)} method.
    * <b>Note:</b> This implementation should cast and call through to the type checked method above
    * </pre>
    * @param player another player to compare with
    * @return true if the player id is equal
    */
   @Override
   boolean equals(Object player);

   /**
    * Overridden {@link Object#hashCode()} method.
    * @return if {@link #equals(Player)} is true then generated hashCode should also be equal.
    */
   @Override
   int hashCode();

   /**
    * <pre>
    * Used to compare order based on player id ascending for {@literal <}, {@literal >} or equality.
    * @see Comparable for details
    * </pre>.
    */
   @Override
   int compareTo(Player player);

   /**
    * <pre>
    * Overridden {@link Object#toString()} method.
    * Format is as follows, "Player: id=1, name=The Shark, bet=100, points=900, RESULT .. 38"
    * </pre>
    * @return a human readable String that lists the values of this Player
    */
   @Override
   String toString();
}
